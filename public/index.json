{"categories":[{"link":"/categories/java/","name":"Java","slug":"Java"},{"link":"/categories/linux/","name":"Linux","slug":"Linux"}],"pages":[],"posts":[{"link":"/posts/java-%E5%8F%8D%E5%B0%84/","text":"「反射」是 Java 中的一个重要机制，用于在运行时动态地控制类。\n反射的使用场景 通常我们在写代码的时候就知道需要实例化哪一个类并且运行什么方法，然后通过 new 方法创建类的对象，但是有些时候，我们需要在运行时根据不同情况动态实例化不同类。反射就是帮助我们在运行时改变程序的调用行为的方法。\n类加载机制 Java 在编译阶段将 Java 文件编译成 .class 字节码文件，类加载器在类加载阶段将 .class 文件加载进内存，同时实例化一个 java.lang.Class 对象。\n一个 Class 类（.class 文件）对应一个 Class 对象。 Class 对象中保存了对应类的基础信息，比如类有几个字段（Field）？有几个构造方法（Constructor）？有几个方法（Method）？有哪些注解（Annotation）？等信息。 保存类信息对应的 java.lang.Class 对象永远只有一个。 操作反射的 Java 类 获取 Class 对象的方法 Class.forName(包名和类名) JAVA 折叠 复制 Class clazz = Class.forName(\u0026#34;com.shane.java.reflection.User\u0026#34;); 点击展开查看更多 这是反射最常用的方法，也是最能体现反射特性的使用方法。\n类名.class JAVA 折叠 复制 Class clazz = User.class; 点击展开查看更多 类对象.getClass() JAVA 折叠 复制 User user = new User(); Class clazz = user.getClass(); 点击展开查看更多 获取 Class 对象的成员变量 我们定义一个 Student 类：\nJAVA 折叠 复制 package com.shane.learn.spring.playground; public class Student { static { System.out.println(\u0026#34;Student static block\u0026#34;); } public static void staticMethod() { System.out.println(\u0026#34;This is a STATIC METHOD!!\u0026#34;); } public String name; int age; int height; int weight; public Student(String name, int age, int height, int weight) { this.name = name; this.age = age; this.height = height; this.weight = weight; } } 点击展开查看更多 在 main 函数中通过反射获取 Class 对象：\nJAVA 折叠 复制 Class\u0026lt;?\u0026gt; cls = Class.forName(\u0026#34;com.shane.learn.spring.playground.Student\u0026#34;); 点击展开查看更多 获取非私有的成员变量，包含从父类继承的成员变量 JAVA 折叠 复制 Field[] filed = cls.getFields(); for (Field field : filed) { System.out.println(field.getName()); } 点击展开查看更多 获取所有成员变量，但是不包含从父类继承的成员变量 JAVA 折叠 复制 filed = cls.getDeclaredFields(); for (Field field : filed) { System.out.println(field.getName()); } 点击展开查看更多 获取 Class 对象中的方法 getMethods()：获取 Class 对象代表的类的所有的非私有方法，数组，包含从父类继承而来的方法 getDeclaredMethods()：获取 Class 对象代表的类定义的所有的方法，数组，但是不包含从父类继承而来的方法 getMethod(methodName)：获取 Class 对象代表的类的指定方法名的非私有方法 getDeclaredMethod(methodName)：获取 Class 对象代表的类的指定方法名的方法 调用方法 invoke() 方法需要传入对象，因此需要先实例化类。\nJAVA 折叠 复制 Method method = cls.getDeclaredMethod(\u0026#34;message\u0026#34;); Student student = new Student(\u0026#34;shane\u0026#34;, 22, 169, 120); method.invoke(student); 点击展开查看更多 如果要调用类的静态方法，则直接传入 null。\nJAVA 折叠 复制 Method method = cls.getDeclaredMethod(\u0026#34;staticMethod\u0026#34;); method.invoke(null); 点击展开查看更多 反射的优缺点 优点 自由灵活，不受类的访问权限限制。\n缺点 安全性低，性能较低，破坏 Java 类的封装性。\n","title":"Java 反射"},{"link":"/posts/jvm-%E8%99%9A%E6%8B%9F%E6%9C%BA/","text":"JVM 基于栈的设计模式。\nJVM 基于栈的设计模式 JVM 的指令集是基于栈而不是基于寄存器的，这样具有很好的跨平台性。\n如上图所示，线程中执行一个方法时，我们会创建一个栈帧入栈执行。如果该方法调用另外一个方法时会再次创建新的栈帧入栈，方法返回时，原栈帧会返回方法的执行结果给之前的栈帧，随后虚拟机将会丢弃此栈帧。\n局部变量表 每个栈帧中包含局部变量表，用于存储方法参数和方法内定义的局部变量。局部变量中除了方法的参数，还包括 this 这个参数。\n操作数栈 通过操作数栈，我们可以对局部变量表中要操作和待更新的数据进行操作。当一个方法开始执行时，其操作数栈是空的，随着方法的执行和字节码指令的执行，会从局部变量表或对象实例的字段中复制常量或变量写入到操作数栈，再随着计算的进行将栈中元素出栈到局部变量表或者返回给方法调用者，也就是出栈/入栈操作。\n","title":"JVM 虚拟机"},{"link":"/posts/arch-linux-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/","text":"从零安装 minimal Arch Linux\n安装媒介 从 Arch Linux Downloads 下载最新的 ISO 文件\n下载 Rufus 制作系统盘工具\n准备一个空间 \u0026gt; 8GB 的闲置 U 盘作为系统盘\n进入 BIOS 并设置从 U 盘启动。\n网络和时区 解锁所有硬件和软件锁：\nSHELL 折叠 复制 rfkill unblock all 点击展开查看更多 使用iwctl 工具联网：\nSHELL 折叠 复制 iwctl [iwd] station wlan0 scan # 扫描 [iwd] station wlan0 get-networks # 列出所有可用网络 [iwd] station wlan0 connect SSID # 联网 [iwd] exit 点击展开查看更多 设置时区：\nSHELL 折叠 复制 timedatectl set-timezone Asia/Shanghai 点击展开查看更多 分区 首先检查目前的磁盘分区情况：\nSHELL 折叠 复制 lsblk 点击展开查看更多 找到电脑的主磁盘，通常名字是 nvme0n1，开始分区：\nSHELL 折叠 复制 cfdisk /dev/nvme0n1 点击展开查看更多 我的分区如下：\n挂载点 分区类型 大小 /boot EFI System 1G [SWAP] Linux Swap 8G / Linux filesystem All left spaces 分区完后需要格式化分区：\nSHELL 折叠 复制 mkfs.fat -F 32 /dev/nvme0n1p1 mkswap /dev/nvme0n1p2 mkfs.btrfs -f /dev/nvme0n1p3 点击展开查看更多 挂载分区：\nSHELL 折叠 复制 mount /dev/nvme0n1p3 /mnt mount --mkdir /dev/nvme0n1p1 /mnt/boot swapon /dev/nvme0n1p2 点击展开查看更多 安装系统 首先需要通过下载 mirrorlist 更改下载源解决网络问题：\nSHELL 折叠 复制 curl -L \u0026#39;https://archlinux.org/mirrorlist/?country=CN\u0026amp;protocol=https\u0026#39; -o /etc/pacman.d/mirrorlist 点击展开查看更多 取消注释 /etc/pacman.d/mirrorlist 中的内容。\n安装基础组件。我目前的电脑是 AMD GPU，因此我需要安装 amd-ucode。如果你是 Intel 的 CPU，你应该安装 intel-ucode：\nSHELL 折叠 复制 pacstrap -K /mnt base base-devel linux linux-firmware amd-ucode vi neovim fish grub efibootmgr networkmanager sddm cliphist brightnessctl pipewire pipewire-audio pipewire-pulse pipewire-jack pipewire-alsa bluez bluez-utils blueman pavucontrol 点击展开查看更多 初始化配置系统 创建 fatab 文件。\nSHELL 折叠 复制 genfstab -U /mnt \u0026gt; /mnt/etc/fstab cat /mnt/etc/fstab # 用于检查 点击展开查看更多 从 live 环境进入系统：\nSHELL 折叠 复制 arch-chroot /mnt 点击展开查看更多 时区和本地化设置：\nSHELL 折叠 复制 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc 点击展开查看更多 编辑/etc/locale.gen，取消注释 en_US.UTF-8 UTF-8：\nSHELL 折叠 复制 loclae-gen 点击展开查看更多 创建 /etc/locale.conf 并添加：\nSHELL 折叠 复制 LANG=en_US.UTF-8 点击展开查看更多 在 /etc/hostname 中添加 hostname。\nGRUB 配置 在基础组件安装时我们已经安装了 grub 和 efibootmgr，现在需要配置 GRUB：\nSHELL 折叠 复制 grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB grub-mkconfig -o /boot/grub/grub.cfg 点击展开查看更多 设置 root 密码：\nSHELL 折叠 复制 passwd 点击展开查看更多 重启系统并以 root 身份登陆。编辑 /etc/pacman.conf 然后取消注释 [multilib] 的部分，并在文件末尾添加：\nSHELL 折叠 复制 [archlinuxcn] Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch 点击展开查看更多 安装 yay：\nSHELL 折叠 复制 pacman -S archlinuxcn-keyring pacman -S yay 点击展开查看更多 启动一些基础服务：\nSHELL 折叠 复制 systemctl enable --now NetworkManager systemctl enable --now sddm.service systemctl enable --now bluetooth.service 点击展开查看更多 安装显卡驱动：\nSHELL 折叠 复制 pacman -S mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon 点击展开查看更多 添加一个普通用户：\nSHELL 折叠 复制 useradd -G wheel -m shane passwd shane visudo # 取消注释 #%wheel ALL=(ALL:ALL) ALL su - shane # 切换到普通用户 点击展开查看更多 后续 至此，我们已经成功从零安装了一个最小最简洁的 Arch Linux，后续可以根据喜好和需求选择安装窗口管理器还是桌面环境。\n2025 年 8 月 15 日追记 对我来说，自从接触了窗口管理器便难以离开它，我怀念全键盘操作的快乐以及配置工具的满足感。时隔三个月没有使用 Linux 和窗口管理器了，我准备重拾它们。敬请期待后续关于 Linux 的文章，我们一起探索 Linux 世界的乐趣！！\n","title":"Arch Linux 安装指南"}],"tags":[{"link":"/tags/arch-linux/","name":"Arch Linux","slug":"Arch Linux"},{"link":"/tags/java%E5%9F%BA%E7%A1%80/","name":"Java基础","slug":"Java基础"},{"link":"/tags/jvm/","name":"JVM","slug":"JVM"}]}